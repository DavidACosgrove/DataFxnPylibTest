{"executorId":0,"id":"e949dd7d-6199-4f4f-8c95-adeac75b454e","dataFxnDefId":"b9657ce6-3399-47a2-a60d-4d4b30f5620c","serviceName":"MultipleSequenceAlignment","assembly":null,"inputFields":{"sequenceColumn":{"id":"sequenceColumn","dataType":"string","contentType":null,"selectorType":"column","data":"955576c0-e353-47c7-8bb6-80db32494ae5sSequence"},"alignmentMethod":{"id":"alignmentMethod","dataType":"string","contentType":null,"selectorType":null,"data":"MUSCLE"}},"maximumOutputColumns":10,"maximumOutputTables":1,"resultTables":null,"serviceUri":"glysade.python","inputColumns":{"955576c0-e353-47c7-8bb6-80db32494ae5sSequence":{"dataType":"string","name":"Sequence","contentType":"chemical/x-sequence","properties":{"Name":"Sequence","ColumnType":"Imported","DataType":"String","ExternalName":"Sequence","IsValid":"True","Expression":"","Comparer":"Spotfire.Dxp.Data.Cxx.StringDataComparer","Formatter":"Spotfire.Dxp.Data.Formatters.StringFormatter","Origin":"antibody_sequences10","Description":""},"values":["DIVMSQSPSSLAVSAGEKVTMSCKSSQSLLNSRTRKNYLAWYQQKPGQSPKVLIYWASTRESGVPDRFTGRGSGTDFTLTISSVQAEDQAVYYCKQAYIPPLTFGAGTKLELKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEX","DIVMSQSPSSLAVSAGEKVTMSCKSSQSLLNSRTRKNYLAWYQQKPGQSPKVLIYWASTRESGVPDRFTGRGSGTDFTLTISSVQAEDQAVYYCKQAYIPPLTFGAGTKLELKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEX","EVQLQQSGAELMKPGASVKISCKASGYTFSDYWIEWVKQRPGHGLEWIGEILPGSGSTNYHERFKGKATFTADTSSSTAYMQLNSLTSEDSGVYYCLHGNYDFDGWGQGTTLTVSSAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSTWPSETVTCNVAHPASSTKVDKKILD","MDIVLTQSPAIMSASPGEKVTMTCSASSSVNYMYWYQQKSGTSPKRWIYDTSKLASGVPVRFSGSGSGTSYSLTISSMETEDAATYYCQQWGRNPTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRN","DVQLVESGGGSVQAGGSLRLSCAVSGSTYSPCTTGWYRQAPGKEREWVSSISSPGTIYYQDSVKGRFTISRDNAKNTVYLQMNSLQREDTGMYYCQIQCGVRSIREYWGQGTQVTVSSHHHHHH","DVQLVESGGGSVQAGGSLRLSCAVSGSTYSPCTTGWYRQAPGKEREWVSSISSPGTIYYQDSVKGRFTISRDNAKNTVYLQMNSLQREDTGMYYCQIQCGVRSIREYWGQGTQVTVSSHHHHHH","DVQLVESGGGSVQAGGSLRLSCAVSGSTYSPCTTGWVRQAPGKGLEWVSSISSPGTIYYQDSVKGRFTISRDNAKNTVYLQMNSLQREDTGMYYCQIQCGVRSIREYWGQGTQVTVSSHHHHHH","DVQLVESGGGSVQAGGSLRLSCAVSGSTYSPCTTGWVRQAPGKGLEWVSSISSPGTIYYQDSVKGRFTISRDNAKNTVYLQMNSLQREDTGMYYCQIQCGVRSIREYWGQGTQVTVSSHHHHHH","QVKLLEQSGAEVKKPGASVKVSCKASGYSFTSYGLHWVRQAPGQRLEWMGWISAGTGNTKYSQKFRGRVTFTRDTSATTAYMGLSSLRPEDTAVYYCARDPYGGGKSEFDYWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSC","ELVMTQSPSSLSASVGDRVNIACRASQGISSALAWYQQKPGKAPRLLIYDASNLESGVPSRFSGSGSGTDFTLTISSLQPEDFAIYYCQQFNSYPLTFGGGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC","DIKMTQSPSSMYTSLGERVTITCKASQDINSFLTWFLQKPGKSPKTLIYRANRLMIGVPSRFSGSGSGQTYSLTISSLEYEDMGIYYCLQYDDFPLTFGAGTKLDLKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKEINVKWKIDGSERQNGVLDSWTEQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC","QDQLQQSGAELVRPGASVKLSCKALGYIFTDYEIHWVKQTPVHGLEWIGGIHPGSSGTAYNQKFKGKATLTADKSSTTAFMELSSLTSEDSAVYYCTRKDYWGQGTLVTVSAAKTTAPSVYPLVPVCGGTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPALLQSGLYTLSSSVTVTSNTWPSQTITCNVAHPASSTKVDKKIEPRV","DIVMTQAAPSVSVTPGESVSISCRSSKSLLHSNGNTYLYWFLQRPGQSPQLLIYRMSNLASGVPDRFSGSGSGTAFTLRISRVEAEDVGVYYCLQHLEYPFTFGAGTKLELKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC","QVQLQQPGAELVKPGASVKLSCKASGYTFTSNWINWVKQRPGQGLEWIGNIYPDSYRTNYNEKFKRKATLTVDTSSSTAYMQLSSLTSDDSAVYYCVRKHYSYDGVVYWGQGTLVTVSAAKTTAPSVYPLAPVCGDTSGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIEPRGPTIKPCPPCK","EVQLVQSGAEVKKPGSSVKVSCKASGGTFSSYAISWVRQAPGQGLEWMGSIIPWFGTTNYAQKFQGRVTITADESTSTAYMELSSLRSEDTAVYYCARDSEYYFDHWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCHHHHHH","DIQMTQSPSSVSASVGDRVTITCRASQGISNWLNWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSDDPTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC","QVQLQQSGAELVRPGVSVRISCKGSGYTFTDYAMHWVKQSHAKSLEWIGVISTYSGDARFNQKFTGKATMTVDKSSSTAYMELARLTSEDSAIYYCAREVRRSMDYWGQGTSVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCHHHHHH","DIVMTQSHKFMSTSVGDRVSITCKASQDVSTAVAWYQQKPGQSPKLLIYWASTRHTGVPDRFTGSGSGTDYTLTISSVQAEDLALYYCQQHYSTPYTFGGGTKLEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"]}},"webServiceRequest":null,"requestId":-1,"tkid":null,"script":null,"updateBehavior":"automatic","allowedClients":["Analyst","WebPlayer"],"limitBy":"none","ironPython":"############################################\n#  Copyright 2017, 2018, 2019 Glysade LLC  #\n############################################\n\nimport sys,clr\nimport json\nfrom Spotfire.Dxp.Data import DataTable, DataManager, DataType, DataPropertyClass,DataProperty\nfrom Spotfire.Dxp.Application import PanelTypeIdentifiers\nfrom Spotfire.Dxp.Application import Panel\nimport Spotfire.Dxp.Application.PanelCollection\n\nfrom System import AppDomain\nfor asm in AppDomain.CurrentDomain.GetAssemblies():\n    if asm.FullName.StartsWith('Charts,'):\n        clr.AddReference(asm.FullName)\n\nfrom Charts import ChartsModel\nmodel_type = ChartsModel\n\ndef getDataFxnTables(dataFxnId):\n    tables = []\n    for table in Document.Data.Tables:\n        for column in table.Columns:\n            if column.Properties.HasPropertyValue('ChemCharts.DFResult'):\n                dfJson = json.loads(str(column.Properties.GetProperty('ChemCharts.DFResult')))\n                if dfJson['dataFxnId'] == dataFxnId:\n                    tables.append(table)\n    return tables\n\n#dataFxnId passed as arg\ndataTable = getDataFxnTables(dataFxnId)[0]\n\nif not dataTable:\n    raise Exception('target table not found')\n\ntableId = dataTable.Id.ToString()\n\npage = Document.Pages.AddNew('Clustal Results')\npanelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]\n\nfor panel in page.Panels:\n    if panel.TypeId in panelsToHide:\n        if panel.Visible:\n            panel.Visible = False\n\ntableVis = page.Visuals.AddNew[model_type]()\ntableVis.SetKeyValue('visualization','table-visualization')\ntableVis.DataTable = dataTable\ntableVis.ConfigureColumns()\ntableVis.Marking = Document.Data.Markings.DefaultMarkingReference\n\ndendroVis = page.Visuals.AddNew[model_type]()\ndendroVis.SetKeyValue('visualization','dendrogram-visualization')\ndendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.style','0')\ndendroVis.DataTable = dataTable\ndendroVis.ConfigureColumns()\ndendroVis.Marking = Document.Data.Markings.DefaultMarkingReference\nfor columnRef in dendroVis.DataColumnCollection.ColumnReferences:\n    column = columnRef.DataColumn\n    if column.Properties.DataType == DataType.String and column.Properties.HasPropertyValue('tree') and column.Properties.HasPropertyValue('ChemCharts.DFResult'):\n        dfJson = json.loads(str(column.Properties.GetProperty('ChemCharts.DFResult')))\n        if dfJson['dataFxnId'] == dataFxnId:\n            dendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.dendrogramColumnId',str(columnRef.Id))\n            break\n\ntableVis.SetActiveVisual()\npage.AutoConfigure()\n","chartsFxnType":null,"chartsRequest":null}