{"executorId":0,"id":"1bfa5f83-6565-48bf-ae0a-a9111ee22ecc","dataFxnDefId":"b9657ce6-3399-47a2-a60d-4d4b30f5620c","serviceName":"MultipleSequenceAlignment","assembly":null,"inputFields":{"sequenceColumn":{"id":"sequenceColumn","dataType":"string","contentType":null,"selectorType":"column","data":"6dd9653c-7c80-4cc8-8201-8df318961313sSequence"},"alignmentMethod":{"id":"alignmentMethod","dataType":"string","contentType":null,"selectorType":null,"data":"CLUSTALO"}},"maximumOutputColumns":3,"maximumOutputTables":0,"resultTables":null,"serviceUri":"glysade.python","inputColumns":{"6dd9653c-7c80-4cc8-8201-8df318961313sSequence":{"dataType":"string","name":"Sequence","contentType":"chemical/x-sequence","properties":{"Name":"Sequence","DataType":"String","ColumnType":"Imported","IsValid":"True","Formatter":"Spotfire.Dxp.Data.Formatters.StringFormatter","Comparer":"Spotfire.Dxp.Data.Cxx.StringDataComparer"},"values":["CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTGAATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGGCCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAAAGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGAATTTTGATGACTCTCGCAAACGGGAATCTTGGCTCTTTGCATCGGATGGAAGGACGCAGCGAAATGCGATAAGTGGTGTGAATTGCAAGATCCCGTGAACCATCGAGTCTTTTGAACGCAAGTTGCGCCCGAGGCCATCAGGCTAAGGGCACGCCTGCTTGGGCGTCGCGCTTCGTCTCTCTCCTGCCAATGCTTGCCCGGCATACAGCCAGGCCGGCGTGGTGCGGATGTGAAAGATTGGCCCCTTGTGCCTAGGTGCGGCGGGTCCAAGAGCTGGTGTTTTGATGGCCCGGAACCCGGCAAGAGGTGGACGGATGCTGGCAGCAGCTGCCGTGCGAATCCCCCATGTTGTCGTGCTTGTCGGACAGGCAGGAGAACCCTTCCGAACCCCAATGGAGGGCGGTTGACCGCCATTCGGATGTGACCCCAGGTCAGGCGGGGGCACCCGCTGAGTTTACGC","CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTGAATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGGCCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAAAGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGAATTTTGATGACTCTCGCAAACGGGAATCTTGGCTCTTTGCATCGGATGGAAGGACGCAGCGAAATGCGATAAGTGGTGTGAATTGCAAGATCCCGTGAACCATCGAGTCTTTTGAACGCAAGTTGCGCCCGAGGCCATCAGGCTAAGGGCACGCCTGCTTGGGCGTCGCGCTTCGTCTCTCTCCTGCCAATGCTTGCCCGGCATACAGCCAGGCCGGCGTGGTGCGGATGTGAAAGATTGGCCCCTTGTGCCTAGGTGCGGCGGGTCCAAGAGCTGGTGTTTTGATGGCCCGGAACCCGGCAAGAGGTGGACGGATGCTGGCAGCAGCTGCCGTGCGAATCCCCCATGTTGTCGTGCTTGTCGGACAGGCAGGAGAACCCTTCCGAACCCCAATGGAGGGCGGTTGACCGCCATTCGGATGTGACCCCAGGTCAGGCGGGGGCACCCGCTGAGTTTACGC"]}},"webServiceRequest":null,"requestId":1268758516,"tkid":"Glysade.RDKit","script":null,"updateBehavior":"automatic","allowedClients":["Analyst","WebPlayer"],"limitBy":"none","ironPython":"#####################################################\n#  Copyright 2022 Glysade LLC, All Rights Reserved  #\n#####################################################\n\nimport sys,clr\nimport json\nfrom Spotfire.Dxp.Data import DataTable, DataManager, DataType, DataPropertyClass,DataProperty\nfrom Spotfire.Dxp.Application import PanelTypeIdentifiers\nfrom Spotfire.Dxp.Application import Panel\nimport Spotfire.Dxp.Application.PanelCollection\n\nfrom System import AppDomain\nfor asm in AppDomain.CurrentDomain.GetAssemblies():\n    if asm.FullName.StartsWith('Charts,'):\n        clr.AddReference(asm.FullName)\n\nfrom Charts import ChartsModel\nmodel_type = ChartsModel\n\n#dataFxnId passed as arg\ndataTable = InputTables[0]\n\nif not dataTable:\n    raise Exception('target table not found')\n\ntableId = dataTable.Id.ToString()\ndataFxnId = DataFxn.DataFunctionDefinition.Settings['Id']\n\npage = Document.Pages.AddNew('MSA Results')\npanelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]\n\nfor panel in page.Panels:\n    if panel.TypeId in panelsToHide:\n        if panel.Visible:\n            panel.Visible = False\n\ntableVis = page.Visuals.AddNew[model_type]()\ntableVis.SetKeyValue('visualization','table-visualization')\ntableVis.DataTable = dataTable\ntableVis.ConfigureColumns()\ntableVis.Marking = Document.Data.Markings.DefaultMarkingReference\n\ndendroVis = page.Visuals.AddNew[model_type]()\ndendroVis.SetKeyValue('visualization','dendrogram-visualization')\ndendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.style','0')\ndendroVis.DataTable = dataTable\ndendroVis.ConfigureColumns()\ndendroVis.Marking = Document.Data.Markings.DefaultMarkingReference\nfor columnRef in dendroVis.DataColumnCollection.ColumnReferences:\n    column = columnRef.DataColumn\n    if column.Properties.DataType == DataType.String and column.Properties.HasPropertyValue('tree') and column.Properties.HasPropertyValue('ChemCharts.DFResult'):\n        dfJson = json.loads(str(column.Properties.GetProperty('ChemCharts.DFResult')))\n        if dfJson['dataFxnId'] == dataFxnId:\n            dendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.dendrogramColumnId',str(columnRef.Id))\n            break\n\ntableVis.SetActiveVisual()\npage.AutoConfigure()\n","chartsFxnType":null,"chartsRequest":null}