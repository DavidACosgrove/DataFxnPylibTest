{"executorId":0,"id":"b8394130-64d5-4190-964d-80165d472289","dataFxnDefId":"798992b8-953d-4c5b-6ecb-993aecc7b182","serviceName":"Script","assembly":null,"tableId":"dea49630-f58f-4519-9d32-de98925878e9","inputFields":{"sequenceColumn":{"id":"sequenceColumn","dataType":"string","contentType":null,"selectorType":"column","data":"dea49630-f58f-4519-9d32-de98925878e9sSequence"},"codonTableName":{"id":"codonTableName","dataType":"string","contentType":null,"selectorType":null,"data":"Standard"},"initMethod":{"id":"initMethod","dataType":"string","contentType":null,"selectorType":null,"data":"table"}},"maximumOutputColumns":1,"maximumOutputTables":0,"resultTables":null,"serviceUri":"glysade.python","inputColumns":{"dea49630-f58f-4519-9d32-de98925878e9sSequence":{"dataType":"string","name":"Sequence","contentType":"chemical/x-sequence","properties":{"Name":"Sequence","ColumnType":"Imported","DataType":"String","ExternalName":"Sequence","IsValid":"True","Expression":"","Comparer":"Spotfire.Dxp.Data.Cxx.StringDataComparer","Formatter":"Spotfire.Dxp.Data.Formatters.StringFormatter","Origin":"TranslateDNA_StartSite_Test","Description":""},"values":["ATGGGGAAATTTCCCGGGAAATTTCCCGGG","GGGATGAAATTTCCCGGGAAATTTCCCGGG","GGGATGAAAATGCCCGGGAAATTTCCCGGG","GGGAAACCCCTGATGGGGAAATTTCCCGGG","GGGAAATTGCCCCTGGGGAAATTTCCCGGG"]}},"webServiceRequest":null,"requestId":-1,"tkid":null,"script":"from df.bio_helper import column_to_sequences, sequences_to_column\nfrom df.data_transfer import DataFunctionRequest, DataFunctionResponse, string_input_field\n\nfrom Bio.Data import CodonTable\n\ndef execute(request: DataFunctionRequest) -> DataFunctionResponse:\n    column_id = string_input_field(request, 'sequenceColumn')\n    input_column = request.inputColumns[column_id]\n    input_sequences = column_to_sequences(input_column)\n    codon_table_name = string_input_field(request, 'codonTableName', 'Standard')\n    init_site_method = string_input_field(request, 'initMethod')\n\n    #reduce sequences based on initiation site\n    init_sequences = input_sequences.copy()\n    if init_site_method == 'ATG':\n        for n, s in enumerate(input_sequences):\n            idx = s.seq.upper().find('ATG')\n            if idx < 0:\n                init_sequences[n] = None\n            else:\n                init_sequences[n] = s[idx:]\n    elif init_site_method == 'table':\n        codon_table = CodonTable.unambiguous_dna_by_name[codon_table_name]\n        init_codons = codon_table.start_codons\n        for n, s in enumerate(input_sequences):\n            idx = [v for v in [s.seq.upper().find(codon) for codon in init_codons] if v != -1]\n            if len(idx) == 0:\n                init_sequences[n] = None\n            else:\n                init_sequences[n] = s[min(idx):]\n\n    output_sequences = [None if s is None else s.translate(codon_table_name) for s in init_sequences]\n    output_column = sequences_to_column(output_sequences, f'Translated {input_column.name}', genbank_output=False)\n    response = DataFunctionResponse(\n        outputColumns=[output_column])\n    return response\n","updateBehavior":"automatic","allowedClients":["Analyst","WebPlayer"],"limitBy":"none","ironPython":"","chartsFxnType":null,"chartsRequest":null}